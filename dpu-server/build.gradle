buildscript {
    repositories {
        mavenCentral()
    }
    ext {
        springBootVersion = '1.3.1.RELEASE'
    }
    dependencies {
        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: springBootVersion
        classpath 'org.springframework:springloaded:1.2.5.RELEASE'
    }
}

group 'org.openmhealth'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'

jar {
    baseName = 'dpu-server'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
//    compile project(":shared")

    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.4'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-mongodb', version: springBootVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-batch', version: springBootVersion

    compile group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: springBootVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: springBootVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion

    compile group: 'javax.inject', name: 'javax.inject', version: '1'
    compile group: 'org.json', name: 'json', version: '20151123'
    compile group: 'org.apache.httpcomponents', name: 'httpclient'
    compile group: 'org.quartz-scheduler', name: 'quartz', version: '2.2.1'
    compile group: 'org.springframework', name: 'spring-context-support', version: '4.0.5.RELEASE'

    compile(group: 'javax.validation', name: 'validation-api', version: '1.1.0.Final')

    testCompile("junit:junit")
}

task copyArchiveJarToDockerContext(dependsOn: build, type: Copy) {
    from 'build/libs'
    into 'docker'
    include "${jar.archiveName}"
    rename { String fileName ->
        fileName.replace("${jar.archiveName}", "${jar.baseName}.jar")
    }
}

build {
    doLast {
        copyArchiveJarToDockerContext.execute()
    }
}

bootRepackage {
    doLast {
        copyArchiveJarToDockerContext.execute()
    }
}

bootRun {
    jvmArgs = ["-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5006"]
}